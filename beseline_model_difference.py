# -*- coding: utf-8 -*-
"""beseline_model_difference.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1DAWRMQPaVgggcv1w4rvn1Zx-jwtgWxc4
"""

from google.colab import drive
drive.mount('/content/drive')

import pandas as pd 
import numpy as np
from sklearn import preprocessing
from sklearn.preprocessing import StandardScaler
from sklearn.linear_model import LinearRegression
scaler = StandardScaler()

"""## **`MATCHUP DATA REGULAR SEASON 2011_12 `**

"""

path=r'/content/drive/MyDrive/data collection/FINAL MODEL FEEDING DATASET (V - H) direct difference/FINAL_2011_12_MODEL_FEEDING_DATASET_ATTEMPTED_BY_DIFFERENCE.csv'
data_2011_12=pd.read_csv(path)
data_2011_12 = data_2011_12.loc[~data_2011_12.index.duplicated(keep='first')]
data_2011_12.drop(["Unnamed: 0",'Visitor','Home','E+/-'],axis = 1, inplace  = True)
data_2011_12.head()
count = 0
for i in range(0,data_2011_12.shape[0]) :
    if data_2011_12.loc[i].isnull().sum() > 0 :
        count = count + 1
        print(f'Number of null values in row {i} : ' + str(data_2011_12.loc[i].isnull().sum()))
        
count
data_2011_12.columns

data_2011_12.isna().any()
data_2011_12.columns[data_2011_12.isna().any()].tolist()

""":## **`MATCHUP DATA REGULAR SEASON 2012_13 `**

"""

path=r'/content/drive/MyDrive/data collection/FINAL MODEL FEEDING DATASET (V - H) direct difference/FINAL_2012_13_MODEL_FEEDING_DATASET_ATTEMPTED_BY_DIFFERENCE.csv'
data_2012_13=pd.read_csv(path)
data_2012_13.drop(["Unnamed: 0",'Visitor','Home',],axis = 1, inplace  = True)
data_2012_13 = data_2012_13.loc[~data_2012_13.index.duplicated(keep='first')]
data_2012_13.head()
count = 0
for i in range(0,data_2012_13.shape[0]) :
    if data_2012_13.loc[i].isnull().sum() > 0 :
        count = count + 1
        print(f'Number of null values in row {i} : ' + str(data_2012_13.loc[i].isnull().sum()))
        
count
data_2012_13.columns

"""## **`MATCHUP DATA REGULAR SEASON 2013_14 `**

"""

path=r'/content/drive/MyDrive/data collection/FINAL MODEL FEEDING DATASET (V - H) direct difference/FINAL_2013_14_MODEL_FEEDING_DATASET_ATTEMPTED_BY_DIFFERENCE.csv'
data_2013_14=pd.read_csv(path)
data_2013_14.drop(["Unnamed: 0",'Visitor','Home','E+/-'],axis = 1, inplace  = True)
data_2013_14 = data_2013_14.loc[~data_2013_14.index.duplicated(keep='first')]
data_2013_14.head()
count = 0
for i in range(0,data_2013_14.shape[0]) :
    if data_2013_14.loc[i].isnull().sum() > 0 :
        count = count + 1
        print(f'Number of null values in row {i} : ' + str(data_2013_14.loc[i].isnull().sum()))
        
count
data_2013_14.columns

"""## **`MATCHUP DATA REGULAR SEASON 2014_15 `**

"""

path=r'/content/drive/MyDrive/data collection/FINAL MODEL FEEDING DATASET (V - H) direct difference/FINAL_2014_15_MODEL_FEEDING_DATASET_ATTEMPTED_BY_DIFFERENCE.csv'
data_2014_15=pd.read_csv(path)
data_2014_15.drop(["Unnamed: 0",'Visitor','Home','E+/-'],axis = 1, inplace  = True)
data_2014_15 = data_2014_15.loc[~data_2014_15.index.duplicated(keep='first')]
data_2014_15.head()
count = 0
for i in range(0,data_2014_15.shape[0]) :
    if data_2014_15.loc[i].isnull().sum() > 0 :
        count = count + 1
        print(f'Number of null values in row {i} : ' + str(data_2014_15.loc[i].isnull().sum()))
        
count
data_2014_15.columns

"""## **`MATCHUP DATA REGULAR SEASON 2015_16 `**

"""

path=r'/content/drive/MyDrive/data collection/FINAL MODEL FEEDING DATASET (V - H) direct difference/FINAL_2015_16_MODEL_FEEDING_DATASET_ATTEMPTED_BY_DIFFERENCE.csv'
data_2015_16=pd.read_csv(path)
data_2015_16.drop(["Unnamed: 0",'Visitor','Home','E+/-'],axis = 1, inplace  = True)
data_2015_16 = data_2015_16.loc[~data_2015_16.index.duplicated(keep='first')]
data_2015_16.head()
count = 0
for i in range(0,data_2011_12.shape[0]) :
    if data_2011_12.loc[i].isnull().sum() > 0 :
        count = count + 1
        print(f'Number of null values in row {i} : ' + str(data_2011_12.loc[i].isnull().sum()))
        
count
data_2015_16.columns

"""## **`MATCHUP DATA REGULAR SEASON 2016_17 `**

"""

path=r'/content/drive/MyDrive/data collection/FINAL MODEL FEEDING DATASET (V - H) direct difference/FINAL_2016_17_MODEL_FEEDING_DATASET_ATTEMPTED_BY_DIFFERENCE.csv'
data_2016_17=pd.read_csv(path)
data_2016_17.drop(["Unnamed: 0",'Date','Att.','Visitor','Home','E+/-'],axis = 1, inplace  = True)
data_2016_17 = data_2016_17.loc[~data_2016_17.index.duplicated(keep='first')]
data_2016_17.head()
count = 0
for i in range(0,data_2016_17.shape[0]) :
    if data_2016_17.loc[i].isnull().sum() > 0 :
        count = count + 1
        print(f'Number of null values in row {i} : ' + str(data_2016_17.loc[i].isnull().sum()))
        
count
data_2016_17.columns

"""## **`MATCHUP DATA REGULAR SEASON 2017_18 `**

"""

path=r'/content/drive/MyDrive/data collection/FINAL MODEL FEEDING DATASET (V - H) direct difference/FINAL_2017_18_MODEL_FEEDING_DATASET_ATTEMPTED_BY_DIFFERENCE.csv'
data_2017_18=pd.read_csv(path)
data_2017_18.drop(["Unnamed: 0",'Visitor','Home','E+/-'],axis = 1, inplace  = True)
data_2017_18 = data_2017_18.loc[~data_2017_18.index.duplicated(keep='first')]
data_2017_18.head()
count = 0
for i in range(0,data_2011_12.shape[0]) :
    if data_2011_12.loc[i].isnull().sum() > 0 :
        count = count + 1
        print(f'Number of null values in row {i} : ' + str(data_2011_12.loc[i].isnull().sum()))
        
count
data_2017_18.columns



"""## **`MATCHUP DATA REGULAR SEASON 2018_19 `**

"""

path=r'/content/drive/MyDrive/data collection/FINAL MODEL FEEDING DATASET (V - H) direct difference/FINAL_2018_19_MODEL_FEEDING_DATASET_ATTEMPTED_BY_DIFFERENCE_2.csv'
data_2018_19=pd.read_csv(path)
data_2018_19.drop(["Unnamed: 0",'Att.','Visitor','Home','E+/-'],axis = 1, inplace  = True)
data_2018_19 = data_2018_19.loc[~data_2018_19.index.duplicated(keep='first')]
data_2018_19.head()
count = 0
for i in range(0,data_2018_19.shape[0]) :
    if data_2018_19.loc[i].isnull().sum() > 0 :
        count = count + 1
        print(f'Number of null values in row {i} : ' + str(data_2018_19.loc[i].isnull().sum()))
        
count
data_2018_19.columns



"""## **`MATCHUP DATA REGULAR SEASON 2019_20 `**

"""

path=r'/content/drive/MyDrive/data collection/FINAL MODEL FEEDING DATASET (V - H) direct difference/FINAL_2019_20_MODEL_FEEDING_DATASET_ATTEMPTED_BY_DIFFERENCE.csv'
data_2019_20=pd.read_csv(path)
data_2019_20.drop(["Unnamed: 0","Date",'Att.','Visitor','Home','E+/-'],axis = 1, inplace  = True)
data_2019_20 = data_2019_20.loc[~data_2019_20.index.duplicated(keep='first')]
data_2019_20.head()
count = 0
for i in range(0,data_2019_20.shape[0]) :
    if data_2019_20.loc[i].isnull().sum() > 0 :
        count = count + 1
        print(f'Number of null values in row {i} : ' + str(data_2019_20.loc[i].isnull().sum()))
        
count
data_2019_20.columns



path=r'/content/drive/MyDrive/data collection/FINAL MODEL FEEDING DATASET (V - H) direct difference/FINAL_2020_21_MODEL_FEEDING_DATASET_ATTEMPTED_BY_DIFFERENCE.csv'
data_2020_21=pd.read_csv(path)
data_2020_21.drop(["Unnamed: 0","Date",'Att.','Visitor','Home','E+/-'],axis = 1, inplace  = True)
data_2020_21 = data_2020_21.loc[~data_2020_21.index.duplicated(keep='first')]
data_2020_21.head()
count = 0
for i in range(0,data_2019_20.shape[0]) :
    if data_2019_20.loc[i].isnull().sum() > 0 :
        count = count + 1
        print(f'Number of null values in row {i} : ' + str(data_2019_20.loc[i].isnull().sum()))
        
count
data_2020_21.columns

final=pd.concat([data_2011_12,data_2012_13,data_2013_14,data_2014_15,data_2015_16,data_2016_17,data_2017_18,data_2018_19,data_2019_20,data_2020_21],axis=0)

final.isnull

final['BLK'].isnull().any()

count = 0
for i in range(0,final.shape[0]) :
     
    if (final.loc[i]['BLK'].isnull().sum()==0) :
        count = count + 1
        print(f'Number of null values in row {i} : ' + str(final.loc[i].isnull().sum()))
        
count

final.isna().any()

final.columns[final.isna().any()].tolist()

def clean_dataset(df):
    assert isinstance(df, pd.DataFrame), "df needs to be a pd.DataFrame"
    #df.dropna(inplace=True)
    indices_to_keep = ~df.isin([np.nan, np.inf, -np.inf]).any(1)
    
    return df[indices_to_keep].astype(np.float64)

final=clean_dataset(final)

final.shape

x_train=final.drop(['Total_goal','G.1','G','G.1.1',], axis =1)
#x_train=x_train.astype(float)

y_train=final['Total_goal']

path=r'/content/drive/MyDrive/data collection/FINAL MODEL FEEDING DATASET (V - H) direct difference/FINAL_2021_22_MODEL_FEEDING_DATASET_ATTEMPTED_BY_DIFFERENCE.csv'
data_2021_22=pd.read_csv(path)
data_2021_22.drop(["Unnamed: 0",'Visitor','Home','E+/-'],axis = 1, inplace  = True)
data_2021_22 = data_2020_21.loc[~data_2020_21.index.duplicated(keep='first')]
data_2021_22.head()
count = 0
for i in range(0,data_2021_22.shape[0]) :
    if data_2021_22.loc[i].isnull().sum() > 0 :
        count = count + 1
        print(f'Number of null values in row {i} : ' + str(data_2021_22.loc[i].isnull().sum()))
        
count

x_test=data_2020_21.drop(['Total_goal','G'], axis =1)
y_test=data_2020_21['Total_goal']

x_train=x_train.astype(np.float64)

scaler = StandardScaler()
x_train = scaler.fit_transform(x_train)
# y_train = y_train.to_numpy() 
# y_train.reshape(-1, 1)
#y_train = scaler.fit_transform(y_train)
x_train[0]

"""## **LINEAR REGRESSION**"""

reg = LinearRegression()
#x_train.fillna(1)
#x_train.replace([np.inf, -np.inf], np.nan, inplace=True)
reg.fit(x_train,y_train)
r2_score = reg.score(x_test,y_test)
print(r2_score*100,'%')

"""### RANDOM FOREST REGRESSOR"""

from sklearn.ensemble import RandomForestRegressor
import sklearn.metrics as metrics

rf = RandomForestRegressor(n_estimators = 300, max_features = 'sqrt', max_depth = 5, random_state = 18).fit(x_train, y_train)
rf.fit(x_train, y_train) 
y_pred = rf.predict(x_test)
rmse = metrics.mean_squared_error(y_test,y_pred)
rmse



"""## **SUPPORT VECTOR CLASSIFIER**"""

from sklearn.svm import SVC 
clf = SVC(kernel='linear')
clf.fit(x_train, y_train)
y_pred = clf.predict(x_test)
pred = clf.predict(x_test)
metrics.accuracy_score(y_test,y_pred=pred)

"""**DECISION TREE REGRESSOR**




"""

from sklearn.tree import DecisionTreeRegressor
from sklearn.model_selection import cross_val_score
regressor = DecisionTreeRegressor(random_state=0)
regressor.fit(x_train, y_train)
y_pred = regressor.predict(x_test)

